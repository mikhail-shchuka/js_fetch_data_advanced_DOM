{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","forDetailUrl","getPhones","url","fetch","then","response","ok","json","setTimeout","Promise","reject","Error","status","statusText","catch","error","window","console","warn","getFirstReceivedDetails","IDs","race","map","id","getAllSuccessfulDetails","allSettled","phones","phone","details","log","elem","document","createElement","h3","className","textContent","name","prepend","body","append","list","innerHTML","detail","value","join"],"mappings":";AAAA,aAEA,IAAMA,EAAW,wEAEXC,EAAe,oEAGrB,SAASC,EAAUC,GACVC,OAAAA,MAASD,GAAAA,OAAAA,IACbE,KAAK,SAAAC,GACA,OAACA,EAASC,GAKPD,EAASE,OAJPC,WAAW,WAAMC,OAAAA,QAAQC,OAC9B,IAAIC,MAASN,GAAAA,OAAAA,EAASO,OAAYP,OAAAA,OAAAA,EAASQ,eAAgB,OAKhEC,MAAM,SAAAC,GAASC,OAAAA,OAAOC,QAAQC,KAAKH,KAGxC,SAASI,EAAwBC,GACxBX,OAAAA,QAAQY,KAAKD,EAAIE,IAAI,SAAAC,GAC1BtB,OAAAA,EAAaD,GAAAA,OAAAA,GAAeuB,OAAAA,EADA,aAIhC,SAASC,EAAwBJ,GACxBX,OAAAA,QAAQgB,WAAWL,EAAIE,IAAI,SAAAC,GAChCtB,OAAAA,EAAaD,GAAAA,OAAAA,GAAeuB,OAAAA,EADM,aAItCtB,EAAUF,GACPK,KAAK,SAAAsB,GAGGN,OAFKM,EAAOJ,IAAI,SAAAK,GAASA,OAAAA,EAAMJ,OAIvCnB,KAAK,SAAAgB,GAAOD,OAAAA,EAAwBC,KACpChB,KAAK,SAAAwB,GACJZ,OAAOC,QAAQY,IAAI,kBAAmBD,GAEhCE,IAAAA,EAAOC,SAASC,cAAc,OAC9BC,EAAKF,SAASC,cAAc,MAElCF,EAAKI,UAAY,iBACjBD,EAAGE,YAAc,iBACjBL,EAAKK,YAAcP,EAAQQ,KAC3BN,EAAKO,QAAQJ,GACbF,SAASO,KAAKC,OAAOT,KAGzB7B,EAAUF,GACPK,KAAK,SAAAsB,GAGGN,OAFKM,EAAOJ,IAAI,SAAAK,GAASA,OAAAA,EAAMJ,OAIvCnB,KAAK,SAAAgB,GAAOI,OAAAA,EAAwBJ,KACpChB,KAAK,SAAAwB,GACJZ,OAAOC,QAAQY,IAAI,gBAAiBD,GAE9BE,IAAAA,EAAOC,SAASC,cAAc,OAC9BC,EAAKF,SAASC,cAAc,MAC5BQ,EAAOT,SAASC,cAAc,MAEpCF,EAAKI,UAAY,iBACjBD,EAAGE,YAAc,iBAEjBK,EAAKC,UACDb,WAAAA,OAAAA,EAAQN,IAAI,SAAAoB,GAERA,MAAAA,6BAAAA,OAAAA,EAAOC,MAAMP,KAFC,+BAIfQ,KAAK,IALZ,UAOAd,EAAKS,OAAON,GACZH,EAAKS,OAAOC,GACZT,SAASO,KAAKC,OAAOT","file":"main.f1bcfd68.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/'\n  + 'phone-catalogue-static/api/phones.json';\nconst forDetailUrl = 'https://mate-academy.github.io/'\n  + 'phone-catalogue-static/api/phones/';\n\nfunction getPhones(url) {\n  return fetch(`${url}`)\n    .then(response => {\n      if (!response.ok) {\n        return setTimeout(() => Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`)), 5000);\n      }\n\n      return response.json();\n    })\n    .catch(error => window.console.warn(error));\n}\n\nfunction getFirstReceivedDetails(IDs) {\n  return Promise.race(IDs.map(id =>\n    getPhones(`${forDetailUrl}${id}.json`)));\n}\n\nfunction getAllSuccessfulDetails(IDs) {\n  return Promise.allSettled(IDs.map(id =>\n    getPhones(`${forDetailUrl}${id}.json`)));\n}\n\ngetPhones(BASE_URL)\n  .then(phones => {\n    const IDs = phones.map(phone => phone.id);\n\n    return IDs;\n  })\n  .then(IDs => getFirstReceivedDetails(IDs))\n  .then(details => {\n    window.console.log('First details: ', details);\n\n    const elem = document.createElement('div');\n    const h3 = document.createElement('h3');\n\n    elem.className = 'first-received';\n    h3.textContent = 'First Received';\n    elem.textContent = details.name;\n    elem.prepend(h3);\n    document.body.append(elem);\n  });\n\ngetPhones(BASE_URL)\n  .then(phones => {\n    const IDs = phones.map(phone => phone.id);\n\n    return IDs;\n  })\n  .then(IDs => getAllSuccessfulDetails(IDs))\n  .then(details => {\n    window.console.log('All details: ', details);\n\n    const elem = document.createElement('div');\n    const h3 = document.createElement('h3');\n    const list = document.createElement('ul');\n\n    elem.className = 'all-successful';\n    h3.textContent = 'All Successful';\n\n    list.innerHTML = `\n      ${details.map(detail => `\n        <li>\n          ${detail.value.name}\n        </li>\n        `).join('')}\n    `;\n    elem.append(h3);\n    elem.append(list);\n    document.body.append(elem);\n  });\n"]}